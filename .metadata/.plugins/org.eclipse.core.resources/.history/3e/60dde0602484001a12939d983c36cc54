

import java.util.*;
import org.junit.Assert;
import org.junit.Test;

@Generated(value="org.junit-tools-1.1.0")
public class FreeColTest{

	private FreeCol createTestSubject()  {
	 return new FreeCol();
	}

	@MethodRef(name="main", signature="([QString;)V")
	@Test
	public void mainTest() throws Exception {
	String[] args = new String[]{""};
	
	
	// default test
	FreeCol.main(args);
	}

	@MethodRef(name="getJarURLConnection", signature="(QClass;)QJarURLConnection;")
	@Test
	public void getJarURLConnectionTest() throws Exception {
	Class c = null;
	JarURLConnection result;
	
	// default test
	result=Whitebox.invokeMethod(FreeCol.class,"getJarURLConnection", new Object[]{Class.class});
	}

	@MethodRef(name="readVersion", signature="(QJarURLConnection;)QString;")
	@Test
	public void readVersionTest() throws Exception {
	JarURLConnection juc = null;
	String result;
	
	// default test
	result=Whitebox.invokeMethod(FreeCol.class,"readVersion", new Object[]{JarURLConnection.class});
	}

	@MethodRef(name="getDefaultSplashStream", signature="(QJarURLConnection;)QInputStream;")
	@Test
	public void getDefaultSplashStreamTest() throws Exception {
	JarURLConnection juc = null;
	InputStream result;
	
	// default test
	result=Whitebox.invokeMethod(FreeCol.class,"getDefaultSplashStream", new Object[]{JarURLConnection.class});
	}

	@MethodRef(name="fatal", signature="(QStringTemplate;)V")
	@Test
	public void fatalTest() throws Exception {
	StringTemplate template = "";
	
	
	// default test
	FreeCol.fatal(template);
	}

	@MethodRef(name="fatal", signature="(QString;)V")
	@Test
	public void fatalTest_1() throws Exception {
	String err = "";
	
	
	// test 1
	err = null;
	FreeCol.fatal(err);
	
	// test 2
	err = "";
	FreeCol.fatal(err);
	}

	@MethodRef(name="gripe", signature="(QStringTemplate;)V")
	@Test
	public void gripeTest() throws Exception {
	StringTemplate template = "";
	
	
	// default test
	FreeCol.gripe(template);
	} 
}