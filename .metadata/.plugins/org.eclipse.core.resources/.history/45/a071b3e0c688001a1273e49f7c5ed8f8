

import java.util.*;
import org.junit.Assert;
import org.junit.Test;

@Generated(value="org.junit-tools-1.1.0")
public class FreeColServerTest{

	@Before
	public void setUp() throws Exception {
	
	}

	@After
	public void tearDown() throws Exception {
	
	}

	private FreeColServer createTestSubject()  {
	 return new FreeColServer(false, false, new Specification(), 0, "");
	}

	@MethodRef(name="getSinglePlayer", signature="()Z")
	@Test
	public void getSinglePlayerTest() throws Exception {
	FreeColServer testSubject;boolean result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getSinglePlayer();
	
	Assert.fail();
	}

	@MethodRef(name="setSinglePlayer", signature="(Z)V")
	@Test
	public void setSinglePlayerTest() throws Exception {
	FreeColServer testSubject;boolean singlePlayer = false;
	
	
	// default test
	testSubject=createTestSubject();testSubject.setSinglePlayer(singlePlayer);
	
	Assert.fail();
	}

	@MethodRef(name="getPublicServer", signature="()Z")
	@Test
	public void getPublicServerTest() throws Exception {
	FreeColServer testSubject;boolean result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getPublicServer();
	
	Assert.fail();
	}

	@MethodRef(name="setPublicServer", signature="(Z)V")
	@Test
	public void setPublicServerTest() throws Exception {
	FreeColServer testSubject;boolean publicServer = false;
	
	
	// default test
	testSubject=createTestSubject();testSubject.setPublicServer(publicServer);
	
	Assert.fail();
	}

	@MethodRef(name="getName", signature="()QString;")
	@Test
	public void getNameTest() throws Exception {
	FreeColServer testSubject;String result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getName();
	
	Assert.fail();
	}

	@MethodRef(name="setName", signature="(QString;)V")
	@Test
	public void setNameTest() throws Exception {
	FreeColServer testSubject;String name = "";
	
	
	// default test
	testSubject=createTestSubject();testSubject.setName(name);
	
	Assert.fail();
	}

	@MethodRef(name="getHost", signature="()QString;")
	@Test
	public void getHostTest() throws Exception {
	FreeColServer testSubject;String result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getHost();
	
	Assert.fail();
	}

	@MethodRef(name="getPort", signature="()I")
	@Test
	public void getPortTest() throws Exception {
	FreeColServer testSubject;int result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getPort();
	
	Assert.fail();
	}

	@MethodRef(name="serverStart", signature="(I)QServer;")
	@Test
	public void serverStartTest() throws Exception {
	FreeColServer testSubject;int firstPort = 0;
	Server result;
	
	// test 1
	testSubject=createTestSubject();firstPort = 0;
	result=Whitebox.invokeMethod(testSubject,"serverStart", new Object[]{firstPort});
	Assert.assertEquals(null, result);
	
	// test 2
	testSubject=createTestSubject();firstPort = -1;
	result=Whitebox.invokeMethod(testSubject,"serverStart", new Object[]{firstPort});
	Assert.assertEquals(null, result);
	
	// test 3
	testSubject=createTestSubject();firstPort = 1;
	result=Whitebox.invokeMethod(testSubject,"serverStart", new Object[]{firstPort});
	Assert.assertEquals(null, result);
	
	Assert.fail();
	}

	@MethodRef(name="getSpecification", signature="()QSpecification;")
	@Test
	public void getSpecificationTest() throws Exception {
	FreeColServer testSubject;Specification result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getSpecification();
	
	Assert.fail();
	}

	@MethodRef(name="getUserConnectionHandler", signature="()QUserConnectionHandler;")
	@Test
	public void getUserConnectionHandlerTest() throws Exception {
	FreeColServer testSubject;UserConnectionHandler result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getUserConnectionHandler();
	
	Assert.fail();
	}

	@MethodRef(name="getController", signature="()QController;")
	@Test
	public void getControllerTest() throws Exception {
	FreeColServer testSubject;Controller result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getController();
	
	Assert.fail();
	}

	@MethodRef(name="getPreGameInputHandler", signature="()QPreGameInputHandler;")
	@Test
	public void getPreGameInputHandlerTest() throws Exception {
	FreeColServer testSubject;PreGameInputHandler result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getPreGameInputHandler();
	
	Assert.fail();
	}

	@MethodRef(name="getInGameInputHandler", signature="()QInGameInputHandler;")
	@Test
	public void getInGameInputHandlerTest() throws Exception {
	FreeColServer testSubject;InGameInputHandler result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getInGameInputHandler();
	
	Assert.fail();
	}

	@MethodRef(name="getInGameController", signature="()QInGameController;")
	@Test
	public void getInGameControllerTest() throws Exception {
	FreeColServer testSubject;InGameController result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getInGameController();
	
	Assert.fail();
	}

	@MethodRef(name="getGame", signature="()QServerGame;")
	@Test
	public void getGameTest() throws Exception {
	FreeColServer testSubject;ServerGame result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getGame();
	
	Assert.fail();
	}

	@MethodRef(name="setGame", signature="(QServerGame;)V")
	@Test
	public void setGameTest() throws Exception {
	FreeColServer testSubject;ServerGame game = null;
	
	
	// default test
	testSubject=createTestSubject();testSubject.setGame(game);
	
	Assert.fail();
	}

	@MethodRef(name="setAIMain", signature="(QAIMain;)V")
	@Test
	public void setAIMainTest() throws Exception {
	FreeColServer testSubject;AIMain aiMain = null;
	
	
	// default test
	testSubject=createTestSubject();testSubject.setAIMain(aiMain);
	
	Assert.fail();
	}

	@MethodRef(name="getAIMain", signature="()QAIMain;")
	@Test
	public void getAIMainTest() throws Exception {
	FreeColServer testSubject;AIMain result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getAIMain();
	
	Assert.fail();
	}

	@MethodRef(name="getGameState", signature="()QGameState;")
	@Test
	public void getGameStateTest() throws Exception {
	FreeColServer testSubject;GameState result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getGameState();
	
	Assert.fail();
	} 
}