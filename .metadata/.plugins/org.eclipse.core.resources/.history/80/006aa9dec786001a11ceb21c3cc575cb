

import java.util.*;
import org.junit.Assert;
import org.junit.Test;

@Generated(value="org.junit-tools-1.1.0")
public class ClientOptionsTest{

	@Before
	public void setUp() throws Exception {
	
	}

	@After
	public void tearDown() throws Exception {
	
	}

	private ClientOptions createTestSubject()  {
	 return new ClientOptions();
	}

	@MethodRef(name="load", signature="(QFreeColXMLReader;)Z")
	@Test
	public void loadTest() throws Exception {
	ClientOptions testSubject;FreeColXMLReader xr = null;
	boolean result;
	
	// test 1
	testSubject=createTestSubject();xr = null;
	result=Whitebox.invokeMethod(testSubject,"load", new Object[]{FreeColXMLReader.class});
	Assert.assertEquals(false, result);
	
	Assert.fail();
	}

	@MethodRef(name="load", signature="(QBufferedInputStream;)Z")
	@Test
	public void loadTest_1() throws Exception {
	ClientOptions testSubject;BufferedInputStream bis = null;
	boolean result;
	
	// test 1
	testSubject=createTestSubject();bis = null;
	result=Whitebox.invokeMethod(testSubject,"load", new Object[]{BufferedInputStream.class});
	Assert.assertEquals(false, result);
	
	Assert.fail();
	}

	@MethodRef(name="load", signature="(QInputStream;)Z")
	@Test
	public void loadTest_2() throws Exception {
	ClientOptions testSubject;InputStream is = null;
	boolean result;
	
	// default test
	testSubject=createTestSubject();result=Whitebox.invokeMethod(testSubject,"load", new Object[]{InputStream.class});
	
	Assert.fail();
	}

	@MethodRef(name="load", signature="(QFile;)Z")
	@Test
	public void loadTest_3() throws Exception {
	ClientOptions testSubject;File file = null;
	boolean result;
	
	// test 1
	testSubject=createTestSubject();file = null;
	result=testSubject.load(file);
	Assert.assertEquals(false, result);
	
	Assert.fail();
	} 
}