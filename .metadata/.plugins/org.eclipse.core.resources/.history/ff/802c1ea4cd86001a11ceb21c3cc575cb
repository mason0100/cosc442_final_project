

import java.util.*;
import org.junit.Assert;
import org.junit.Test;

@Generated(value="org.junit-tools-1.1.0")
public class FontLibraryTest{

	@Before
	public void setUp() throws Exception {
	
	}

	@After
	public void tearDown() throws Exception {
	
	}

	private FontLibrary createTestSubject()  {
	 return new FontLibrary();
	}

	@MethodRef(name="createMainFont", signature="(QString;F)QFont;")
	@Test
	public void createMainFontTest() throws Exception {
	String fontName = "";
	float scaleFactor = 0;
	Font result;
	
	// test 1
	fontName = null;
	result=Whitebox.invokeMethod(FontLibrary.class,"createMainFont", new Object[]{fontName, scaleFactor});
	Assert.assertEquals(null, result);
	
	// test 2
	fontName = "";
	result=Whitebox.invokeMethod(FontLibrary.class,"createMainFont", new Object[]{fontName, scaleFactor});
	Assert.assertEquals(null, result);
	
	Assert.fail();
	}

	@MethodRef(name="createScaledFont", signature="(QFontType;QFontSize;)QFont;")
	@Test
	public void createScaledFontTest() throws Exception {
	FontLibrary testSubject;FontType fontType = null;
	FontSize fontSize = null;
	Font result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.createScaledFont(fontType, fontSize);
	
	Assert.fail();
	}

	@MethodRef(name="createScaledFont", signature="(QFontType;QFontSize;I)QFont;")
	@Test
	public void createScaledFontTest_1() throws Exception {
	FontLibrary testSubject;FontType fontType = null;
	FontSize fontSize = null;
	int style = 0;
	Font result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.createScaledFont(fontType, fontSize, style);
	
	Assert.fail();
	}

	@MethodRef(name="createCompatibleScaledFont", signature="(QString;QFontType;QFontSize;)QFont;")
	@Test
	public void createCompatibleScaledFontTest() throws Exception {
	FontLibrary testSubject;String string = "";
	FontType fontType = null;
	FontSize fontSize = null;
	Font result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.createCompatibleScaledFont(string, fontType, fontSize);
	
	Assert.fail();
	}

	@MethodRef(name="createCompatibleScaledFont", signature="(QString;QFontType;QFontSize;I)QFont;")
	@Test
	public void createCompatibleScaledFontTest_1() throws Exception {
	FontLibrary testSubject;String string = "";
	FontType fontType = null;
	FontSize fontSize = null;
	int style = 0;
	Font result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.createCompatibleScaledFont(string, fontType, fontSize, style);
	
	Assert.fail();
	}

	@MethodRef(name="createFont", signature="(QFontType;QFontSize;)QFont;")
	@Test
	public void createFontTest() throws Exception {
	FontType fontType = null;
	FontSize fontSize = null;
	Font result;
	
	// default test
	result=FontLibrary.createFont(fontType, fontSize);
	
	Assert.fail();
	} 
}