

import java.util.*;
import org.junit.Assert;
import org.junit.Test;

@Generated(value="org.junit-tools-1.1.0")
public class FreeColClientTest{

	@Before
	public void setUp() throws Exception {
	
	}

	@After
	public void tearDown() throws Exception {
	
	}

	private FreeColClient createTestSubject()  {
	 return new FreeColClient(new InputStream(), "");
	}

	@MethodRef(name="startClient", signature="(QDimension;QString;ZZQFile;QSpecification;)V")
	@Test
	public void startClientTest() throws Exception {
	FreeColClient testSubject;Dimension size = null;
	String userMsg = "";
	boolean sound = false;
	boolean showOpeningVideo = false;
	File savedGame = null;
	Specification spec = null;
	
	
	// test 1
	testSubject=createTestSubject();savedGame = null;
	spec = null;
	testSubject.startClient(size, userMsg, sound, showOpeningVideo, savedGame, spec);
	
	// test 2
	testSubject=createTestSubject();spec = null;
	savedGame = null;
	testSubject.startClient(size, userMsg, sound, showOpeningVideo, savedGame, spec);
	
	// test 3
	testSubject=createTestSubject();savedGame = null;
	testSubject.startClient(size, userMsg, sound, showOpeningVideo, savedGame, spec);
	
	// test 4
	testSubject=createTestSubject();spec = null;
	testSubject.startClient(size, userMsg, sound, showOpeningVideo, savedGame, spec);
	
	Assert.fail();
	}

	@MethodRef(name="loadClientOptions", signature="(QFile;)QClientOptions;")
	@Test
	public void loadClientOptionsTest() throws Exception {
	FreeColClient testSubject;File savedGameFile = null;
	ClientOptions result;
	
	// test 1
	testSubject=createTestSubject();savedGameFile = null;
	result=Whitebox.invokeMethod(testSubject,"loadClientOptions", new Object[]{File.class});
	Assert.assertEquals(null, result);
	
	Assert.fail();
	}

	@MethodRef(name="fatal", signature="(QString;)V")
	@Test
	public void fatalTest() throws Exception {
	String err = "";
	
	
	// default test
	FreeColClient.fatal(err);
	
	Assert.fail();
	}

	@MethodRef(name="getConnectController", signature="()QConnectController;")
	@Test
	public void getConnectControllerTest() throws Exception {
	FreeColClient testSubject;ConnectController result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getConnectController();
	
	Assert.fail();
	}

	@MethodRef(name="getPreGameController", signature="()QPreGameController;")
	@Test
	public void getPreGameControllerTest() throws Exception {
	FreeColClient testSubject;PreGameController result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getPreGameController();
	
	Assert.fail();
	}

	@MethodRef(name="getPreGameInputHandler", signature="()QPreGameInputHandler;")
	@Test
	public void getPreGameInputHandlerTest() throws Exception {
	FreeColClient testSubject;PreGameInputHandler result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getPreGameInputHandler();
	
	Assert.fail();
	}

	@MethodRef(name="getInGameController", signature="()QInGameController;")
	@Test
	public void getInGameControllerTest() throws Exception {
	FreeColClient testSubject;InGameController result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getInGameController();
	
	Assert.fail();
	}

	@MethodRef(name="getInGameInputHandler", signature="()QInGameInputHandler;")
	@Test
	public void getInGameInputHandlerTest() throws Exception {
	FreeColClient testSubject;InGameInputHandler result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getInGameInputHandler();
	
	Assert.fail();
	}

	@MethodRef(name="getMapEditorController", signature="()QMapEditorController;")
	@Test
	public void getMapEditorControllerTest() throws Exception {
	FreeColClient testSubject;MapEditorController result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getMapEditorController();
	
	Assert.fail();
	}

	@MethodRef(name="getSoundController", signature="()QSoundController;")
	@Test
	public void getSoundControllerTest() throws Exception {
	FreeColClient testSubject;SoundController result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getSoundController();
	
	Assert.fail();
	}

	@MethodRef(name="getFreeColServer", signature="()QFreeColServer;")
	@Test
	public void getFreeColServerTest() throws Exception {
	FreeColClient testSubject;FreeColServer result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.getFreeColServer();
	
	Assert.fail();
	}

	@MethodRef(name="setFreeColServer", signature="(QFreeColServer;)V")
	@Test
	public void setFreeColServerTest() throws Exception {
	FreeColClient testSubject;FreeColServer freeColServer = null;
	
	
	// default test
	testSubject=createTestSubject();testSubject.setFreeColServer(freeColServer);
	
	Assert.fail();
	}

	@MethodRef(name="askServer", signature="()QServerAPI;")
	@Test
	public void askServerTest() throws Exception {
	FreeColClient testSubject;ServerAPI result;
	
	// default test
	testSubject=createTestSubject();result=testSubject.askServer();
	
	Assert.fail();
	} 
}